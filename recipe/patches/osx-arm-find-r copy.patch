diff --git a/tools/cmake/FindR.cmake b/tools/cmake/FindR.cmake
index df5c33e..cad13f8 100644
--- a/tools/cmake/FindR.cmake
+++ b/tools/cmake/FindR.cmake
@@ -35,7 +35,7 @@ set(TEMP_CMAKE_FIND_APPBUNDLE ${CMAKE_FIND_APPBUNDLE})
 set(CMAKE_FIND_APPBUNDLE "NEVER")
 
 # Find R.
-find_program(R_EXECUTABLE R DOC "R executable.")
+set(R_EXECUTABLE $ENV{R})
 
 if(R_EXECUTABLE)
     # Get the location of R.
@@ -55,33 +55,15 @@ if(R_EXECUTABLE)
     )
 
     if(RESULT EQUAL 0)
-        string(REGEX REPLACE ".*([0-9]+\\.[0-9]+\\.[0-9]+).*" "\\1"
+        string(REGEX REPLACE "R version ([0-9]+\\.[0-9]+\\.[0-9]+).*" "\\1"
             R_VERSION_STRING "${R_VERSION_STRING}")
     endif()
-
-    
     set(R_HOME ${R_BASE_DIR} CACHE PATH "R home directory obtained from R RHOME")
     mark_as_advanced(R_HOME)
 endif()
-
-# Find the Rscript program.
-find_program(RSCRIPT_EXECUTABLE Rscript DOC "Rscript executable." HINTS "${R_HOME}/bin")
-
 set(CMAKE_FIND_APPBUNDLE ${TEMP_CMAKE_FIND_APPBUNDLE})
-
-# Search for non-standard R.h include path if header missing
-execute_process(COMMAND ${RSCRIPT_EXECUTABLE} --vanilla "-e" "R.home('include')"
-    RESULT_VARIABLE _haveR_h
-    OUTPUT_VARIABLE _R_INCLUDE_location
-    ERROR_VARIABLE _R_INCLUDE_location
-    OUTPUT_STRIP_TRAILING_WHITESPACE)
-
-execute_process(COMMAND ${RSCRIPT_EXECUTABLE} --vanilla "-e" "file.path(R.home('etc'), .Platform$r_arch, 'Makeconf')"
-                OUTPUT_VARIABLE R_MAKECONF
-                ERROR_VARIABLE  R_MAKECONF
-                OUTPUT_STRIP_TRAILING_WHITESPACE)
-string(REGEX MATCHALL "\".*\"" R_MAKECONF "${R_MAKECONF}")
-string(REGEX REPLACE "\"" "" R_MAKECONF "${R_MAKECONF}")
+set(R_INCLUDE_DIR "$ENV{PREFIX}/lib/R/include/")
+set(R_MAKECONF "$ENV{BUILD_PREFIX}/lib/R/etc/Makeconf.$ENV{target_platform}")
 # find libR by way of makeconf
 execute_process(COMMAND sed -e "s/^LIBR = //" -e "t" -e "d" "${R_MAKECONF}"
                 OUTPUT_VARIABLE LIBR_STRING
@@ -107,14 +89,12 @@ foreach(VAR IN LISTS MAKECONF_REPLACE)
     endif()
 endforeach()
     # Some cleanup in location of R.
-    string(REGEX MATCHALL "\".*\"" _R_INCLUDE_location "${_R_INCLUDE_location}")
-    string(REGEX REPLACE "\"" "" _R_INCLUDE_location "${_R_INCLUDE_location}")
     string(REGEX REPLACE "\"" "" LIBR_STRING "${LIBR_STRING}")
-    set(R_INCLUDE_DIR ${_R_INCLUDE_location})
     set(R_LDFLAGS ${LIBR_STRING})
+    string(REPLACE "$ENV{BUILD_PREFIX}" "$ENV{PREFIX}" R_LDFLAGS ${R_LDFLAGS})
 
-mark_as_advanced(RSCRIPT_EXECUTABLE R_EXECUTABLE)
-set(_REQUIRED_R_VARIABLES R_EXECUTABLE RSCRIPT_EXECUTABLE R_INCLUDE_DIR R_LDFLAGS)
+mark_as_advanced(R_EXECUTABLE)
+set(_REQUIRED_R_VARIABLES R_EXECUTABLE R_INCLUDE_DIR R_LDFLAGS)
 
 include(FindPackageHandleStandardArgs)
 find_package_handle_standard_args(
--- a/tools/CMakeLists.txt
+++ b/tools/CMakeLists.txt
@@ -15,7 +15,6 @@ include(FetchContent)
 include(ExternalProject)
 include(CheckSymbolExists)
 include(CheckCXXSymbolExists)
-include(cmake/FindRModule.cmake)
 
 set(CMAKE_C_STANDARD 99)
 set(CMAKE_CXX_STANDARD 17)
@@ -79,37 +78,14 @@ else()
     find_package(LAPACK REQUIRED)
 endif()
 
-if(NOT(APPLE AND(CMAKE_HOST_SYSTEM_PROCESSOR MATCHES arm64)))
-    find_package(OpenMP)
-endif()
-
-find_r_module(Rcpp)
-find_r_module(RcppArmadillo)
-find_r_module(RcppProgress)
-
 if(R_INCLUDE_DIR)
     target_include_directories(RcppPlanc PRIVATE "${R_INCLUDE_DIR}")
 else()
     message(FATAL_ERROR "missing R headers")
 endif()
-
-if(R_RCPP)
-    target_include_directories(RcppPlanc PRIVATE "${R_RCPP}/include")
-else()
-    message(FATAL_ERROR "missing RcppArmadillo")
-endif()
-
-if(R_RCPPARMADILLO)
-    target_include_directories(RcppPlanc PRIVATE "${R_RCPPARMADILLO}/include")
-else()
-    message(FATAL_ERROR "missing RcppArmadillo")
-endif()
-
-if(R_RCPPPROGRESS)
-    target_include_directories(RcppPlanc PRIVATE "${R_RCPPPROGRESS}/include")
-else()
-    message(FATAL_ERROR "missing RcppProgress")
-endif()
+target_include_directories(RcppPlanc PRIVATE "$ENV{PREFIX}/lib/R/library/Rcpp/include")
+target_include_directories(RcppPlanc PRIVATE "$ENV{PREFIX}/lib/R/library/RcppArmadillo/include")
+target_include_directories(RcppPlanc PRIVATE "$ENV{PREFIX}/lib/R/library/RcppProgress/include")
 
 # from scivision/patchfile, MIT license c. Michael
 if(WIN32)
   